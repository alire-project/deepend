Deepend Version History.

deepend-3.1 (Current Version) 
- Can now deallocate the default subpool, then continue to allocate
  from the default subpool.
- Took advantage of new Ada 2012 features including;
   o New Iterator syntax for containers
   o Expression Functions
   o Conditional expressions
   o Invariants
   o Pre and Post conditions
   o static subtype predicates
- Corrected build documentation for ICC Ada 2005 compiler
- Test drivers improved with more comprehensive tests
- Tree benchmark tests more specialized between Ada 2012 vs Ada 2005
- Restructured compiler output folders

deepend-3.0 
- Major revision now supports both Ada 2012 and Ada 2005
- Storage_Size is now implemented.

deepend-2.6 (Mostly a minor release with documentation updates)
- Runs on Android OS. Dual core Samsung Galaxy S II
- Compiles under the Irvine Ada 2005 Compiler, Windows Linux
- Compiles under GNAT AUX FSF 4.6.1, Android
- Compiles under GNAT GPL 2010-2011
- Warning flagged as Ada 2005 bug, renamed to GNAT bug, since Irvine
  compile does not exhibit that bug.
- Added build instructions for Irvine compiler, and added more notes to
  README

deepend-2.5
- Added Basic_Dynamic_Pools package, which is a subset of the functionality
  of Dynamic_Pools, with a simpler interface. It does not provide subpools,
  but still can be reclaimed all at once, similar to Dynamic_Pools.
  The idea is that these pools are declared at nested scopes, and 
  access types are defined with Storage_Pool attribute set to the pool object.
  Basic_Dynamic_Pools should be forward compatible to Ada 2012, unlike
  Dynamic_Pools which will need modifications to the interface.
  
deepend-2.4
- Major update to comments in the code. 
- Improvement to performance for call Default_Subpool_Of_Pool, avoids 
  accessing protected object 
- A Default_Block_Size of 0 on the pool object discriminant causes the 
  default subpool to not be created 
- Attempting to allocate from the default storage pool if the pool's 
  Default_Block_Size is 0 raises Storage_Error

deepend-2.3
- Since removing the bindings to the Apache Run Time pool library in
  the earlier deepend-1.1 version, deepend has been running much more
  slowly than the Apache Binding version, due to a logic error.
  Now the binary tree tests outperform the Apache runtime binding version. 
  e.g. For depth 20, the Apache version takes about 4.6 seconds to run.
  This new deepend version takes about 3.8 seconds to run. 

deepend-2.2
- Since Ada.Unchecked_Deallocate_Subpool doesn't exist, 
  Unchecked_Deallocate_Subpool and Unchecked_Deallocate_Objects need to 
  get same effect, by dispatching to Deallocate_Subpool. 
  Otherwise, these routine aren't doing anything. Once that is done, it 
  exposed a bug. The finalization of the pool cannot call 
  Unchecked_Deallocate_Subpool, because that leaves the protected object, 
  then tries to regain access to the protected object on the dispatching, 
  which leads to a deadlock. This bug was fixed, by simply calling code that
  frees the subpool objects.

deepend-2.1
- Renamed Scope_Bomb type to Scoped_Subpool_Handle
- Added Create_Subpool call that returns a Scoped_Subpool_Handle
- Changed binary tree test code to use Scoped_Subpool_Handles

deepend-2.0
- Major redesign to work with the Ada 2012 described in AI05-0111-3.
- Subpools can no longer have subpools. This did not seem to be necessary
  and added runtime complexity. Instead, the root pool can have any number
  of subpools concurrently.
- Synchronization added to pools subpool list, to allow tasks to create 
  subpools

deepend-1.3
- Added alternate preview of Ada 2012 version, depending on whether
  further changes can be made to the Ada 2012 proposal. The alternate
  version is intended to be considered as safer than the previous version
  since it avoids dangling reference possibilities for subpool handles.

deepend-1.2
- Removed binding to Apache Runtime Pools library. Deepend is now pure Ada 
  source.

deepend-1.1
-  Addressed comments from initial code review. 

deepend-1.0	- Initial Version
